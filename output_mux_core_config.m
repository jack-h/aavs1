
function output_mux_core_config(this_block)

  % Revision History:
  %
  %   12-Nov-2013  (17:05 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /media/data/jack/ami/ami_correlator/fft_core.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('output_mux_core');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;
  this_block.addSimulinkInport('vld');
  this_block.addSimulinkInport('din0');
  this_block.addSimulinkInport('din1');
  this_block.addSimulinkInport('din2');
  this_block.addSimulinkInport('din3');
  this_block.addSimulinkInport('din4');
  this_block.addSimulinkInport('din5');
  this_block.addSimulinkInport('din6');
  this_block.addSimulinkInport('din7');
  this_block.addSimulinkInport('din8');
  this_block.addSimulinkInport('din9');
  this_block.addSimulinkInport('din10');
  this_block.addSimulinkInport('din11');
  this_block.addSimulinkInport('din12');
  this_block.addSimulinkInport('din13');
  this_block.addSimulinkInport('din14');
  this_block.addSimulinkInport('din15');
  this_block.addSimulinkInport('din16');
  this_block.addSimulinkInport('din17');
  this_block.addSimulinkInport('din18');
  this_block.addSimulinkInport('din19');
  this_block.addSimulinkInport('din20');
  this_block.addSimulinkInport('din21');
  this_block.addSimulinkInport('din22');
  this_block.addSimulinkInport('din23');
  this_block.addSimulinkInport('din24');
  this_block.addSimulinkInport('din25');
  this_block.addSimulinkInport('din26');
  this_block.addSimulinkInport('din27');
  this_block.addSimulinkInport('din28');
  this_block.addSimulinkInport('din29');
  this_block.addSimulinkInport('din30');
  this_block.addSimulinkInport('din31');
  this_block.addSimulinkInport('din32');
  this_block.addSimulinkInport('din33');
  this_block.addSimulinkInport('din34');
  this_block.addSimulinkInport('din35');


  this_block.addSimulinkOutport('win_sync_out');
  this_block.addSimulinkOutport('win_vld_out');
  this_block.addSimulinkOutport('dout');

  win_sync_out_port = this_block.port('win_sync_out');
  win_sync_out_port.setType('Bool');
  win_sync_out_port.useHDLVector(false);

  win_vld_out_port = this_block.port('win_vld_out');
  win_vld_out_port.setType('Bool');
  win_vld_out_port.useHDLVector(false);

  dout_port = this_block.port('dout');
  dout_port.setType('UFix_64_0');

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('din0').width ~= 64);
      this_block.setError('Input data type for port "din0" must have width=64.');
    end
    
    if (this_block.port('din1').width ~= 64);
      this_block.setError('Input data type for port "din1" must have width=64.');
    end
    
    if (this_block.port('din2').width ~= 64);
      this_block.setError('Input data type for port "din2" must have width=64.');
    end
    
    if (this_block.port('din3').width ~= 64);
      this_block.setError('Input data type for port "din3" must have width=64.');
    end
    
    if (this_block.port('din4').width ~= 64);
      this_block.setError('Input data type for port "din4" must have width=64.');
    end
    
    if (this_block.port('din5').width ~= 64);
      this_block.setError('Input data type for port "din5" must have width=64.');
    end
    
    if (this_block.port('din6').width ~= 64);
      this_block.setError('Input data type for port "din6" must have width=64.');
    end
    
    if (this_block.port('din7').width ~= 64);
      this_block.setError('Input data type for port "din7" must have width=64.');
    end
    
    if (this_block.port('din8').width ~= 64);
      this_block.setError('Input data type for port "din8" must have width=64.');
    end
    
    if (this_block.port('din9').width ~= 64);
      this_block.setError('Input data type for port "din9" must have width=64.');
    end
    
    if (this_block.port('din10').width ~= 64);
      this_block.setError('Input data type for port "din10" must have width=64.');
    end
    
    if (this_block.port('din11').width ~= 64);
      this_block.setError('Input data type for port "din11" must have width=64.');
    end
    
    if (this_block.port('din12').width ~= 64);
      this_block.setError('Input data type for port "din12" must have width=64.');
    end
    
    if (this_block.port('din13').width ~= 64);
      this_block.setError('Input data type for port "din13" must have width=64.');
    end
    
    if (this_block.port('din14').width ~= 64);
      this_block.setError('Input data type for port "din14" must have width=64.');
    end
    
    if (this_block.port('din15').width ~= 64);
      this_block.setError('Input data type for port "din15" must have width=64.');
    end
    
    if (this_block.port('din16').width ~= 64);
      this_block.setError('Input data type for port "din16" must have width=64.');
    end
    
    if (this_block.port('din17').width ~= 64);
      this_block.setError('Input data type for port "din17" must have width=64.');
    end
    
    if (this_block.port('din18').width ~= 64);
      this_block.setError('Input data type for port "din18" must have width=64.');
    end
    
    if (this_block.port('din19').width ~= 64);
      this_block.setError('Input data type for port "din19" must have width=64.');
    end
    
    if (this_block.port('din20').width ~= 64);
      this_block.setError('Input data type for port "din20" must have width=64.');
    end
    
    if (this_block.port('din21').width ~= 64);
      this_block.setError('Input data type for port "din21" must have width=64.');
    end
    
    if (this_block.port('din22').width ~= 64);
      this_block.setError('Input data type for port "din22" must have width=64.');
    end
    
    if (this_block.port('din23').width ~= 64);
      this_block.setError('Input data type for port "din23" must have width=64.');
    end
    
    if (this_block.port('din24').width ~= 64);
      this_block.setError('Input data type for port "din24" must have width=64.');
    end
    
    if (this_block.port('din25').width ~= 64);
      this_block.setError('Input data type for port "din25" must have width=64.');
    end
    
    if (this_block.port('din26').width ~= 64);
      this_block.setError('Input data type for port "din26" must have width=64.');
    end
    
    if (this_block.port('din27').width ~= 64);
      this_block.setError('Input data type for port "din27" must have width=64.');
    end
    
    if (this_block.port('din28').width ~= 64);
      this_block.setError('Input data type for port "din28" must have width=64.');
    end
    
    if (this_block.port('din29').width ~= 64);
      this_block.setError('Input data type for port "din29" must have width=64.');
    end
    
    if (this_block.port('din30').width ~= 64);
      this_block.setError('Input data type for port "din30" must have width=64.');
    end
    
    if (this_block.port('din31').width ~= 64);
      this_block.setError('Input data type for port "din31" must have width=64.');
    end
    
    if (this_block.port('din32').width ~= 64);
      this_block.setError('Input data type for port "din32" must have width=64.');
    end
    
    if (this_block.port('din33').width ~= 64);
      this_block.setError('Input data type for port "din33" must have width=64.');
    end
    
    if (this_block.port('din34').width ~= 64);
      this_block.setError('Input data type for port "din34" must have width=64.');
    end
    
    if (this_block.port('din35').width ~= 64);
      this_block.setError('Input data type for port "din35" must have width=64.');
    end
    
    if (this_block.port('vld').width ~= 1);
      this_block.setError('Input data type for port "vld" must have width=1.');
    end

    this_block.port('vld').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk_1','ce_1')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('output_mux_core.vhd');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

