
function cmult_core_config(this_block)

  % Revision History:
  %
  %   12-Nov-2013  (17:05 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /media/data/jack/ami/ami_correlator/fft_core.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('cmult_core');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;
  this_block.addSimulinkInport('sync_in');
  this_block.addSimulinkInport('din0');
  this_block.addSimulinkInport('din1');
  this_block.addSimulinkInport('din2');
  this_block.addSimulinkInport('din3');
  this_block.addSimulinkInport('din4');
  this_block.addSimulinkInport('din5');
  this_block.addSimulinkInport('din6');
  this_block.addSimulinkInport('din7');


  this_block.addSimulinkOutport('vld_out');
  this_block.addSimulinkOutport('dout00');
  this_block.addSimulinkOutport('dout01');
  this_block.addSimulinkOutport('dout02');
  this_block.addSimulinkOutport('dout03');
  this_block.addSimulinkOutport('dout04');
  this_block.addSimulinkOutport('dout05');
  this_block.addSimulinkOutport('dout06');
  this_block.addSimulinkOutport('dout07');
  this_block.addSimulinkOutport('dout11');
  this_block.addSimulinkOutport('dout12');
  this_block.addSimulinkOutport('dout13');
  this_block.addSimulinkOutport('dout14');
  this_block.addSimulinkOutport('dout15');
  this_block.addSimulinkOutport('dout16');
  this_block.addSimulinkOutport('dout17');
  this_block.addSimulinkOutport('dout22');
  this_block.addSimulinkOutport('dout23');
  this_block.addSimulinkOutport('dout24');
  this_block.addSimulinkOutport('dout25');
  this_block.addSimulinkOutport('dout26');
  this_block.addSimulinkOutport('dout27');
  this_block.addSimulinkOutport('dout33');
  this_block.addSimulinkOutport('dout34');
  this_block.addSimulinkOutport('dout35');
  this_block.addSimulinkOutport('dout36');
  this_block.addSimulinkOutport('dout37');
  this_block.addSimulinkOutport('dout44');
  this_block.addSimulinkOutport('dout45');
  this_block.addSimulinkOutport('dout46');
  this_block.addSimulinkOutport('dout47');
  this_block.addSimulinkOutport('dout55');
  this_block.addSimulinkOutport('dout56');
  this_block.addSimulinkOutport('dout57');
  this_block.addSimulinkOutport('dout66');
  this_block.addSimulinkOutport('dout67');
  this_block.addSimulinkOutport('dout77');




  vld_out_port = this_block.port('vld_out');
  vld_out_port.setType('Bool');
  vld_out_port.useHDLVector(false);

  dout00_port = this_block.port('dout00');
  dout01_port = this_block.port('dout01');
  dout02_port = this_block.port('dout02');
  dout03_port = this_block.port('dout03');
  dout04_port = this_block.port('dout04');
  dout05_port = this_block.port('dout05');
  dout06_port = this_block.port('dout06');
  dout07_port = this_block.port('dout07');
  dout11_port = this_block.port('dout11');
  dout12_port = this_block.port('dout12');
  dout13_port = this_block.port('dout13');
  dout14_port = this_block.port('dout14');
  dout15_port = this_block.port('dout15');
  dout16_port = this_block.port('dout16');
  dout17_port = this_block.port('dout17');
  dout22_port = this_block.port('dout22');
  dout23_port = this_block.port('dout23');
  dout24_port = this_block.port('dout24');
  dout25_port = this_block.port('dout25');
  dout26_port = this_block.port('dout26');
  dout27_port = this_block.port('dout27');
  dout33_port = this_block.port('dout33');
  dout34_port = this_block.port('dout34');
  dout35_port = this_block.port('dout35');
  dout36_port = this_block.port('dout36');
  dout37_port = this_block.port('dout37');
  dout44_port = this_block.port('dout44');
  dout45_port = this_block.port('dout45');
  dout46_port = this_block.port('dout46');
  dout47_port = this_block.port('dout47');
  dout55_port = this_block.port('dout55');
  dout56_port = this_block.port('dout56');
  dout57_port = this_block.port('dout57');
  dout66_port = this_block.port('dout66');
  dout67_port = this_block.port('dout67');
  dout77_port = this_block.port('dout77');

  dout00_port.setType('UFix_64_0');
  dout01_port.setType('UFix_64_0');
  dout02_port.setType('UFix_64_0');
  dout03_port.setType('UFix_64_0');
  dout04_port.setType('UFix_64_0');
  dout05_port.setType('UFix_64_0');
  dout06_port.setType('UFix_64_0');
  dout07_port.setType('UFix_64_0');
  dout11_port.setType('UFix_64_0');
  dout12_port.setType('UFix_64_0');
  dout13_port.setType('UFix_64_0');
  dout14_port.setType('UFix_64_0');
  dout15_port.setType('UFix_64_0');
  dout16_port.setType('UFix_64_0');
  dout17_port.setType('UFix_64_0');
  dout22_port.setType('UFix_64_0');
  dout23_port.setType('UFix_64_0');
  dout24_port.setType('UFix_64_0');
  dout25_port.setType('UFix_64_0');
  dout26_port.setType('UFix_64_0');
  dout27_port.setType('UFix_64_0');
  dout33_port.setType('UFix_64_0');
  dout34_port.setType('UFix_64_0');
  dout35_port.setType('UFix_64_0');
  dout36_port.setType('UFix_64_0');
  dout37_port.setType('UFix_64_0');
  dout44_port.setType('UFix_64_0');
  dout45_port.setType('UFix_64_0');
  dout46_port.setType('UFix_64_0');
  dout47_port.setType('UFix_64_0');
  dout55_port.setType('UFix_64_0');
  dout56_port.setType('UFix_64_0');
  dout57_port.setType('UFix_64_0');
  dout66_port.setType('UFix_64_0');
  dout67_port.setType('UFix_64_0');
  dout77_port.setType('UFix_64_0');

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('din0').width ~= 16);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    if (this_block.port('din1').width ~= 16);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    if (this_block.port('din2').width ~= 16);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    if (this_block.port('din3').width ~= 16);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    if (this_block.port('din4').width ~= 16);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    if (this_block.port('din5').width ~= 16);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    if (this_block.port('din6').width ~= 16);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    if (this_block.port('din7').width ~= 16);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    
    if (this_block.port('sync_in').width ~= 1);
      this_block.setError('Input data type for port "sync" must have width=1.');
    end

    this_block.port('sync_in').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk_1','ce_1')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('cmult_core.vhd');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

