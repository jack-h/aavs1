
function fft_core_config(this_block)

  % Revision History:
  %
  %   12-Nov-2013  (17:05 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /media/data/jack/ami/ami_correlator/fft_core.vhd
  %
  %
  
  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('fft_core');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;
  this_block.addSimulinkInport('shift_in');
  this_block.addSimulinkInport('sync_in');
  this_block.addSimulinkInport('pol_in0');
  this_block.addSimulinkInport('pol_in1');
  this_block.addSimulinkInport('pol_in2');
  this_block.addSimulinkInport('pol_in3');
  this_block.addSimulinkInport('pol_in4');
  this_block.addSimulinkInport('pol_in5');
  this_block.addSimulinkInport('pol_in6');
  this_block.addSimulinkInport('pol_in7');
  this_block.addSimulinkInport('pol_in8');
  this_block.addSimulinkInport('pol_in9');
  this_block.addSimulinkInport('pol_in10');
  this_block.addSimulinkInport('pol_in11');
  this_block.addSimulinkInport('pol_in12');
  this_block.addSimulinkInport('pol_in13');
  this_block.addSimulinkInport('pol_in14');
  this_block.addSimulinkInport('pol_in15');

  this_block.addSimulinkOutport('sync_out');
  this_block.addSimulinkOutport('pol0');
  this_block.addSimulinkOutport('pol1');
  this_block.addSimulinkOutport('pol2');
  this_block.addSimulinkOutport('pol3');
  this_block.addSimulinkOutport('pol4');
  this_block.addSimulinkOutport('pol5');
  this_block.addSimulinkOutport('pol6');
  this_block.addSimulinkOutport('pol7');
  this_block.addSimulinkOutport('pol8');
  this_block.addSimulinkOutport('pol9');
  this_block.addSimulinkOutport('pol10');
  this_block.addSimulinkOutport('pol11');
  this_block.addSimulinkOutport('pol12');
  this_block.addSimulinkOutport('pol13');
  this_block.addSimulinkOutport('pol14');
  this_block.addSimulinkOutport('pol15');
  this_block.addSimulinkOutport('oflow');


  oflow_port = this_block.port('oflow');
  oflow_port.setType('UFix_8_0');
  pol0_port = this_block.port('pol0');
  pol0_port.setType('UFix_36_0');
  pol1_port = this_block.port('pol1');
  pol1_port.setType('UFix_36_0');
  pol2_port = this_block.port('pol2');
  pol2_port.setType('UFix_36_0');
  pol3_port = this_block.port('pol3');
  pol3_port.setType('UFix_36_0');
  pol4_port = this_block.port('pol4');
  pol4_port.setType('UFix_36_0');
  pol5_port = this_block.port('pol5');
  pol5_port.setType('UFix_36_0');
  pol6_port = this_block.port('pol6');
  pol6_port.setType('UFix_36_0');
  pol7_port = this_block.port('pol7');
  pol7_port.setType('UFix_36_0');
  pol8_port = this_block.port('pol8');
  pol8_port.setType('UFix_36_0');
  pol9_port = this_block.port('pol9');
  pol9_port.setType('UFix_36_0');
  pol10_port = this_block.port('pol10');
  pol10_port.setType('UFix_36_0');
  pol11_port = this_block.port('pol11');
  pol11_port.setType('UFix_36_0');
  pol12_port = this_block.port('pol12');
  pol12_port.setType('UFix_36_0');
  pol13_port = this_block.port('pol13');
  pol13_port.setType('UFix_36_0');
  pol14_port = this_block.port('pol14');
  pol14_port.setType('UFix_36_0');
  pol15_port = this_block.port('pol15');
  pol15_port.setType('UFix_36_0');
  sync_out_port = this_block.port('sync_out');
  sync_out_port.setType('Bool');
  sync_out_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('pol_in0').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    
    if (this_block.port('pol_in1').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    
    if (this_block.port('pol_in2').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    
    if (this_block.port('pol_in3').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
   
    if (this_block.port('pol_in4').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    
    if (this_block.port('pol_in5').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end

    if (this_block.port('pol_in6').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end    
    
    if (this_block.port('pol_in7').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    
    if (this_block.port('pol_in8').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    
    if (this_block.port('pol_in9').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    
    if (this_block.port('pol_in10').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    
    if (this_block.port('pol_in11').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    
    if (this_block.port('pol_in12').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
   
    if (this_block.port('pol_in13').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end
    
    if (this_block.port('pol_in14').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end

    if (this_block.port('pol_in15').width ~= 36);
      this_block.setError('Input data type for port "pol_in0" must have width=36.');
    end    
    
    
    if (this_block.port('shift_in').width ~= 10);
      this_block.setError('Input data type for port "shift" must have width=15.');
    end     
        
    if (this_block.port('sync_in').width ~= 1);
      this_block.setError('Input data type for port "sync" must have width=1.');
    end
    
    this_block.port('sync_in').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk_1','ce_1')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('fft_core.vhd');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

